import{_ as a,o as n,c as t,a as s,b as l,t as o,f as p}from"./app.6386801b.js";const m=JSON.parse('{"title":"Decrypt Message","description":"","frontmatter":{"date":"2023-02-01T00:00:00.000Z","title":"Decrypt Message","tags":["algorithm","pramp","array"]},"headers":[{"level":2,"title":"Question","slug":"question","link":"#question","children":[{"level":3,"title":"Example","slug":"example","link":"#example","children":[]}]},{"level":2,"title":"Solution","slug":"solution","link":"#solution","children":[{"level":3,"title":"Code","slug":"code","link":"#code","children":[]},{"level":3,"title":"Time& Space Complexity","slug":"time-space-complexity","link":"#time-space-complexity","children":[]}]}],"relativePath":"posts/decrypt_message.md"}'),r={name:"posts/decrypt_message.md"},c={id:"frontmatter-title",tabindex:"-1"},i=s("a",{class:"header-anchor",href:"#frontmatter-title","aria-hidden":"true"},"#",-1),d=p(`<h2 id="question" tabindex="-1">Question <a class="header-anchor" href="#question" aria-hidden="true">#</a></h2><p>Every word is encrypted as follows:</p><ul><li>Convert every letter to its ASCII value.</li><li>Add 1 to the first letter, and then for every letter from the second one to the last one, add the value of the previous letter.</li><li>Subtract 26 from every letter until it is in the range of lowercase letters a-z in ASCII.</li><li>Convert the values back to letters.</li></ul><p>For instance, to encrypt the word \u201Ccrime\u201D</p><p>Decrypted message: c r i m e Step 1: 99 114 105 109 101 Step 2: 100 214 319 428 529 Step 3: 100 110 111 116 113 Encrypted message: d n o t q</p><p>Write a function named decrypt(word) that receives a string that consists of small latin letters only, and returns the decrypted word.</p><h3 id="example" tabindex="-1">Example <a class="header-anchor" href="#example" aria-hidden="true">#</a></h3><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki"><code><span class="line"><span style="color:#A6ACCD;">input:  word = &quot;dnotq&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">output: &quot;crime&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">input:  word = &quot;flgxswdliefy&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">output: &quot;encyclopedia&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><h2 id="solution" tabindex="-1">Solution <a class="header-anchor" href="#solution" aria-hidden="true">#</a></h2><p>So the encryption algorithm is:</p><ol><li>ord(Y[0]) = ord(X[0]) + 1</li><li>ord(Y[1]) = ord(X[1]) + ord(Y[0]) - N*26</li></ol><p>Then we can modify the equation to get the decryption algorithm:</p><ol><li>ord(X[0]) = ord(Y[0]) - 1</li><li>ord(X[1]) = ord(Y[1]) - ord(Y[0]) + N*26</li></ol><h3 id="code" tabindex="-1">Code <a class="header-anchor" href="#code" aria-hidden="true">#</a></h3><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki"><code><span class="line"><span style="color:#C792EA;">def</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">solution</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">word</span><span style="color:#89DDFF;">):</span></span>
<span class="line"><span style="color:#A6ACCD;">    decryption </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">    prev_letter_value </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">for</span><span style="color:#A6ACCD;"> letter </span><span style="color:#89DDFF;">in</span><span style="color:#A6ACCD;"> word</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">        letter_ascii_value </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">ord</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">letter</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">        letter_ascii_value </span><span style="color:#89DDFF;">-=</span><span style="color:#A6ACCD;"> prev_letter_value</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">while</span><span style="color:#A6ACCD;"> letter_ascii_value </span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">ord</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">a</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">):</span></span>
<span class="line"><span style="color:#A6ACCD;">            letter_ascii_value </span><span style="color:#89DDFF;">+=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">26</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">        decryption </span><span style="color:#89DDFF;">+=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">chr</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">letter_ascii_value</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">        prev_letter_value </span><span style="color:#89DDFF;">+=</span><span style="color:#A6ACCD;"> letter_ascii_value</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#82AAFF;">print</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">decryption</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">return</span><span style="color:#A6ACCD;"> decryption</span></span>
<span class="line"></span>
<span class="line"></span></code></pre></div><h3 id="time-space-complexity" tabindex="-1">Time&amp; Space Complexity <a class="header-anchor" href="#time-space-complexity" aria-hidden="true">#</a></h3><p>Time Complexity:</p><p>the function\u2019s asymptotic time complexity is O(N), where N is the length of the input string.</p><p>the loop that iterates through the letters in the input is performed N times.</p><p>Space Complexity:</p><p>the space usage is also O(N) since the output is the same size as the input, and we only keep the output and the second step in storage.</p>`,21);function y(e,D,h,A,C,u){return n(),t("div",null,[s("h1",c,[l(o(e.$frontmatter.title)+" ",1),i]),d])}const _=a(r,[["render",y]]);export{m as __pageData,_ as default};
