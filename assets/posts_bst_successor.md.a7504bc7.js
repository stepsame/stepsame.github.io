import{_ as e,o as a,c as l,a as s,b as o,t as p,f as t}from"./app.2db74fad.js";const m=JSON.parse('{"title":"BST Successor Search","description":"","frontmatter":{"date":"2023-02-03T00:00:00.000Z","title":"BST Successor Search","tags":["algorithm","pramp","tree"]},"headers":[{"level":2,"title":"Question","slug":"question","link":"#question","children":[{"level":3,"title":"Example","slug":"example","link":"#example","children":[]}]},{"level":2,"title":"Solution","slug":"solution","link":"#solution","children":[{"level":3,"title":"Code","slug":"code","link":"#code","children":[]},{"level":3,"title":"Time& Space Complexity","slug":"time-space-complexity","link":"#time-space-complexity","children":[]}]}],"relativePath":"posts/bst_successor.md"}'),c={name:"posts/bst_successor.md"},r={id:"frontmatter-title",tabindex:"-1"},i=s("a",{class:"header-anchor",href:"#frontmatter-title","aria-hidden":"true"},"#",-1),d=t(`<h2 id="question" tabindex="-1">Question <a class="header-anchor" href="#question" aria-hidden="true">#</a></h2><p>In a Binary Search Tree (BST), an Inorder Successor of a node is defined as the node with the smallest key greater than the key of the input node(see examples below). <br> Given a node inputNode in a BST, you\u2019re asked to write a function findInOrderSuccessor that returns the Inorder Successor of inputNode.<br> If inputNode has no Inorder Successor, return null.\\</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki"><code><span class="line"><span style="color:#A6ACCD;">            20</span></span>
<span class="line"><span style="color:#A6ACCD;">           /   \\ </span></span>
<span class="line"><span style="color:#A6ACCD;">          9    25</span></span>
<span class="line"><span style="color:#A6ACCD;">         / \\</span></span>
<span class="line"><span style="color:#A6ACCD;">        5   12</span></span>
<span class="line"><span style="color:#A6ACCD;">           /  \\</span></span>
<span class="line"><span style="color:#A6ACCD;">         11    14</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><h3 id="example" tabindex="-1">Example <a class="header-anchor" href="#example" aria-hidden="true">#</a></h3><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki"><code><span class="line"><span style="color:#A6ACCD;">iinput = node 11</span></span>
<span class="line"><span style="color:#A6ACCD;">output = node 12</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">input = node 9</span></span>
<span class="line"><span style="color:#A6ACCD;">output = node 11</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">input = node 14</span></span>
<span class="line"><span style="color:#A6ACCD;">output = node 20</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><h2 id="solution" tabindex="-1">Solution <a class="header-anchor" href="#solution" aria-hidden="true">#</a></h2><p>A node\u2019s in-order successor is its right subtree\u2019s leftmost child.<br> If the right subtree of the node doesn\u2019t exist, then the in-order successor is the parent of the current left subtree.<br> So we can move up the tree towards the root until we encounter a node that is the left child of its parent.</p><h3 id="code" tabindex="-1">Code <a class="header-anchor" href="#code" aria-hidden="true">#</a></h3><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki"><code><span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">def</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">find_in_order_successor</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">self</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;">input_node</span><span style="color:#89DDFF;">):</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">if</span><span style="color:#A6ACCD;"> input_node</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">right</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#676E95;"># return the node with minimum key in the right subtree</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">while</span><span style="color:#A6ACCD;"> input_node</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">left</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">                input_node </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> input_node</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">left</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">return</span><span style="color:#A6ACCD;"> input_node</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">        child </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> input_node</span></span>
<span class="line"><span style="color:#A6ACCD;">        ancestor </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> input_node</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">parent</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#676E95;"># travel up using the parent pointer until you see</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#676E95;"># a node which is the left child of its parent. The parent</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#676E95;"># of such a node is successorNode.</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">while</span><span style="color:#A6ACCD;"> ancestor </span><span style="color:#89DDFF;">and</span><span style="color:#A6ACCD;"> ancestor</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">right</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">==</span><span style="color:#A6ACCD;"> child</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">            child </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> ancestor</span></span>
<span class="line"><span style="color:#A6ACCD;">            ancestor </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> child</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">parent</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">return</span><span style="color:#A6ACCD;"> ancestor</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"></span></code></pre></div><h3 id="time-space-complexity" tabindex="-1">Time&amp; Space Complexity <a class="header-anchor" href="#time-space-complexity" aria-hidden="true">#</a></h3><p>Time Complexity:</p><p>in both cases where either inputNode has a right child or doesn\u2019t have one, we are visiting only O(H) number of nodes, where H is the height of the BST.<br> For a balanced BST, since H = log(N), where N is the number of nodes in the BST, the time complexity is O(log(N)).<br> For an unbalanced BST, the time complexity is O(N).</p><p>Space Complexity:</p><p>throughout the entire algorithm, we used only a constant amount of space, hence the space complexity is O(1).</p>`,14);function h(n,y,C,A,u,D){return a(),l("div",null,[s("h1",r,[o(p(n.$frontmatter.title)+" ",1),i]),d])}const f=e(c,[["render",h]]);export{m as __pageData,f as default};
