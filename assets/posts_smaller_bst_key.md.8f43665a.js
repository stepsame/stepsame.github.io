import{_ as a,o as n,c as l,a as s,b as t,t as o,f as p}from"./app.6386801b.js";const F=JSON.parse('{"title":"Largest Smaller BST Key","description":"","frontmatter":{"date":"2023-02-03T00:00:00.000Z","title":"Largest Smaller BST Key","tags":["algorithm","pramp","tree"]},"headers":[{"level":2,"title":"Question","slug":"question","link":"#question","children":[{"level":3,"title":"Example","slug":"example","link":"#example","children":[]}]},{"level":2,"title":"Solution","slug":"solution","link":"#solution","children":[{"level":3,"title":"Code","slug":"code","link":"#code","children":[]},{"level":3,"title":"Time& Space Complexity","slug":"time-space-complexity","link":"#time-space-complexity","children":[]}]}],"relativePath":"posts/smaller_bst_key.md"}'),r={name:"posts/smaller_bst_key.md"},c={id:"frontmatter-title",tabindex:"-1"},i=s("a",{class:"header-anchor",href:"#frontmatter-title","aria-hidden":"true"},"#",-1),y=p(`<h2 id="question" tabindex="-1">Question <a class="header-anchor" href="#question" aria-hidden="true">#</a></h2><p>Given a root of a Binary Search Tree (BST) and a number num, implement an efficient function findLargestSmallerKey that finds the largest key in the tree that is smaller than num.<br> If such a number doesn\u2019t exist, return -1. <br> Assume that all keys in the tree are nonnegative.</p><h3 id="example" tabindex="-1">Example <a class="header-anchor" href="#example" aria-hidden="true">#</a></h3><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki"><code><span class="line"><span style="color:#A6ACCD;">Input: For num = 17 and the binary search tree below:</span></span>
<span class="line"><span style="color:#A6ACCD;">            20</span></span>
<span class="line"><span style="color:#A6ACCD;">            /  \\</span></span>
<span class="line"><span style="color:#A6ACCD;">          9    25</span></span>
<span class="line"><span style="color:#A6ACCD;">         / \\</span></span>
<span class="line"><span style="color:#A6ACCD;">        5   12</span></span>
<span class="line"><span style="color:#A6ACCD;">            /  \\</span></span>
<span class="line"><span style="color:#A6ACCD;">         11    14</span></span>
<span class="line"><span style="color:#A6ACCD;">Output: 14 since it\u2019s the largest key in the tree that is still smaller than 17.</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><h2 id="solution" tabindex="-1">Solution <a class="header-anchor" href="#solution" aria-hidden="true">#</a></h2><p>We could use the binary search algorithm to find the smaller key.<br> We start from the root. <br> If the root value is greater than or equal to num, we move to the left subtree; <br> otherwise, we compare the value with the current min value and move to the right subtree.</p><h3 id="code" tabindex="-1">Code <a class="header-anchor" href="#code" aria-hidden="true">#</a></h3><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki"><code><span class="line"><span style="color:#A6ACCD;">   </span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">def</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">find_largest_smaller_key</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">self</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;">num</span><span style="color:#89DDFF;">):</span></span>
<span class="line"><span style="color:#A6ACCD;">        result </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">-</span><span style="color:#F78C6C;">1</span></span>
<span class="line"><span style="color:#A6ACCD;">        node </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> self</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">root</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">while</span><span style="color:#A6ACCD;"> node</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">if</span><span style="color:#A6ACCD;"> node</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">key</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;"> num</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">                result </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> node</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">key</span></span>
<span class="line"><span style="color:#A6ACCD;">                node </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> node</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">right</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">else</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">                node </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> node</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">left</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">return</span><span style="color:#A6ACCD;"> result</span></span>
<span class="line"></span>
<span class="line"></span></code></pre></div><h3 id="time-space-complexity" tabindex="-1">Time&amp; Space Complexity <a class="header-anchor" href="#time-space-complexity" aria-hidden="true">#</a></h3><p>Time Complexity:</p><p>We scan the tree once from the root to the leaves and do a constant number of actions for each node. <br> if the tree is balanced the complexity is O(log(N)). <br> Otherwise, it could be up to O(N).</p><p>Space Complexity:</p><p>Throughout the entire algorithm, we used only a constant amount of space, hence the space complexity is O(1).</p>`,13);function h(e,d,C,D,A,u){return n(),l("div",null,[s("h1",c,[t(o(e.$frontmatter.title)+" ",1),i]),y])}const f=a(r,[["render",h]]);export{F as __pageData,f as default};
