import{_ as a,o as l,c as o,a as s,b as p,t as e,f as t}from"./app.c5ab3d2d.js";const m=JSON.parse('{"title":"H-Tree Construction","description":"","frontmatter":{"date":"2023-01-23T00:00:00.000Z","title":"H-Tree Construction","tags":["algorithm","pramp","recursion"]},"headers":[{"level":2,"title":"Question","slug":"question","link":"#question","children":[]},{"level":2,"title":"Solution","slug":"solution","link":"#solution","children":[{"level":3,"title":"Code","slug":"code","link":"#code","children":[]},{"level":3,"title":"Time& Space Complexity","slug":"time-space-complexity","link":"#time-space-complexity","children":[]}]}],"relativePath":"posts/h_tree.md"}'),r={name:"posts/h_tree.md"},c={id:"frontmatter-title",tabindex:"-1"},F=s("a",{class:"header-anchor",href:"#frontmatter-title","aria-hidden":"true"},"#",-1),y=t(`<h2 id="question" tabindex="-1">Question <a class="header-anchor" href="#question" aria-hidden="true">#</a></h2><p>An H-tree is a geometric shape that consists of a repeating pattern resembles the letter \u201CH\u201D.</p><p>It can be constructed by starting with a line segment of arbitrary length, drawing two segments of the same length at right angles to the first through its endpoints, and continuing in the same vein, reducing (dividing) the length of the line segments drawn at each stage by \u221A2.</p><p>Write a function drawHTree that constructs an H-tree, given its center (x and y coordinates), a starting length, and depth.</p><p>Assume that the starting line is parallel to the X-axis. Use the function drawLine provided to implement your algorithm.</p><p>In a production code, a drawLine function would render a real line between two points.</p><p>However, this is not a real production environment, so to make things easier, implement drawLine such that it simply prints its arguments (the print format is left to your discretion).</p><h2 id="solution" tabindex="-1">Solution <a class="header-anchor" href="#solution" aria-hidden="true">#</a></h2><p>We will start from the center point. Compute the coordinates of the 4 tips of the H.</p><p>Then we shall draw the 3 line segments of the H, i.e. left and right vertical of the H, and the connection of the two vertical segments.</p><p>We will update the length and recursively draw 4 half-size H-trees of order one less than the current depth.</p><h3 id="code" tabindex="-1">Code <a class="header-anchor" href="#code" aria-hidden="true">#</a></h3><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki"><code><span class="line"><span style="color:#89DDFF;">from</span><span style="color:#A6ACCD;"> collections </span><span style="color:#89DDFF;">import</span><span style="color:#A6ACCD;"> namedtuple</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">Point </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">namedtuple</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Point</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> </span><span style="color:#89DDFF;">[</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">x</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">y</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">])</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">def</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">draw_line</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">a</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;">b</span><span style="color:#89DDFF;">):</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#82AAFF;">print</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">a</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> b</span><span style="color:#89DDFF;">)</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">def</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">draw_htree</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">x</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;">y</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;">length</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;">depth</span><span style="color:#89DDFF;">):</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">if</span><span style="color:#A6ACCD;"> depth </span><span style="color:#89DDFF;">==</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">return</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#82AAFF;">print</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">draw </span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> x</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> y</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> length</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> depth</span><span style="color:#89DDFF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    left_x </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> x </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;"> length </span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">2.0</span></span>
<span class="line"><span style="color:#A6ACCD;">    right_x </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> x </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> length </span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">2.0</span></span>
<span class="line"><span style="color:#A6ACCD;">    top_y </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> y </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> length </span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">2.0</span></span>
<span class="line"><span style="color:#A6ACCD;">    bottom_y </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> y </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;"> length </span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">2.0</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#82AAFF;">draw_line</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">Point</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">x</span><span style="color:#89DDFF;">=</span><span style="color:#82AAFF;">left_x</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> </span><span style="color:#A6ACCD;">y</span><span style="color:#89DDFF;">=</span><span style="color:#82AAFF;">top_y</span><span style="color:#89DDFF;">),</span><span style="color:#82AAFF;"> Point</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">x</span><span style="color:#89DDFF;">=</span><span style="color:#82AAFF;">left_x</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> </span><span style="color:#A6ACCD;">y</span><span style="color:#89DDFF;">=</span><span style="color:#82AAFF;">bottom_y</span><span style="color:#89DDFF;">))</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#82AAFF;">draw_line</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">Point</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">x</span><span style="color:#89DDFF;">=</span><span style="color:#82AAFF;">right_x</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> </span><span style="color:#A6ACCD;">y</span><span style="color:#89DDFF;">=</span><span style="color:#82AAFF;">top_y</span><span style="color:#89DDFF;">),</span><span style="color:#82AAFF;"> Point</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">x</span><span style="color:#89DDFF;">=</span><span style="color:#82AAFF;">right_x</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> </span><span style="color:#A6ACCD;">y</span><span style="color:#89DDFF;">=</span><span style="color:#82AAFF;">bottom_y</span><span style="color:#89DDFF;">))</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#82AAFF;">draw_line</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">Point</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">x</span><span style="color:#89DDFF;">=</span><span style="color:#82AAFF;">left_x</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> </span><span style="color:#A6ACCD;">y</span><span style="color:#89DDFF;">=</span><span style="color:#82AAFF;">y</span><span style="color:#89DDFF;">),</span><span style="color:#82AAFF;"> Point</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">x</span><span style="color:#89DDFF;">=</span><span style="color:#82AAFF;">right_x</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> </span><span style="color:#A6ACCD;">y</span><span style="color:#89DDFF;">=</span><span style="color:#82AAFF;">y</span><span style="color:#89DDFF;">))</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    new_length </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> length </span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">2</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">**</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">/</span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">))</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#82AAFF;">draw_htree</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">left_x</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> top_y</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> new_length</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> depth </span><span style="color:#89DDFF;">-</span><span style="color:#82AAFF;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#82AAFF;">draw_htree</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">left_x</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> bottom_y</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> new_length</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> depth </span><span style="color:#89DDFF;">-</span><span style="color:#82AAFF;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#82AAFF;">draw_htree</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">right_x</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> top_y</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> new_length</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> depth </span><span style="color:#89DDFF;">-</span><span style="color:#82AAFF;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#82AAFF;">draw_htree</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">right_x</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> bottom_y</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> new_length</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> depth </span><span style="color:#89DDFF;">-</span><span style="color:#82AAFF;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">)</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"></span></code></pre></div><h3 id="time-space-complexity" tabindex="-1">Time&amp; Space Complexity <a class="header-anchor" href="#time-space-complexity" aria-hidden="true">#</a></h3><p>Time Complexity:</p><p>every call of drawHTree invokes 4 calls of drawHTree until depth reaches to 0.</p><p>So the recursive call stack will be like a 4-ary tree. So the time complexity will be O(4^D).</p><p>Space Complexity:</p><p>recursive calls add overhead since we store them in the execution stack.</p><p>The max length of the stack is equal to the tree&#39;s depth, so the Space Complexity will be O(D)</p>`,20);function D(n,A,i,C,h,d){return l(),o("div",null,[s("h1",c,[p(e(n.$frontmatter.title)+" ",1),F]),y])}const u=a(r,[["render",D]]);export{m as __pageData,u as default};
